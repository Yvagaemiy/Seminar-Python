
print('-1-'*30)

# Дополните приведенный код, используя списочное выражение так, чтобы получить новый список,
# содержащий строки исходного списка, где у каждой строки удалён первый символ.


# keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']

# new_keywords = [i[1:] for i in keywords]

# print(new_keywords)

print('-2-'*30)

# Дополните приведенный код, используя списочное выражение,
# так, чтобы получить новый список, содержащий длины строк исходного списка.


# keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']

# lengths = [len(i)  for i in keywords]

# print(lengths)


print('-3-'*30)

# Дополните приведенный код списочным выражением, чтобы получить новый список,
# содержащий только слова длиной не менее пяти символов (включительно).


# keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']

# new_keywords = [i for i in keywords if len(i) >= 5]

# print(new_keywords)

print('-4-'*30)

# Дополните приведенный код, используя списочное выражение, 
# так чтобы получить список всех чисел-палиндромов от 
# 100 до 1000 (включительно).

# palindromes = [i for i in range(100,1001) if i % 10 == i // 100]

# print(palindromes)

print('-5-'*30)

# На вход программе подается натуральное число 
# n. Напишите программу, использующую списочное выражение, которая создает список, содержащий квадраты чисел от 
# 1 до n (включительно), а затем выводит его элементы построчно, то есть каждый на отдельной строке.
# n = 5
# num = [ i ** 2 for i in range(1,n+1)]

# print(*num,sep='\n')


print('-6-'*30)

# На вход программе подается строка текста, содержащая целые числа.
# Напишите программу, использующую списочное выражение, 
# которая выведет кубы указанных чисел также на одной строке.

# st = '2 3 5'.split()

# st2 = [int(i) ** 3  for i in st]

# print(*st2)

print('-7-'*30)

# На вход программе подается строка текста, содержащая слова.
# Напишите программу, которая выводит слова введенной строки в столбик.


# st = 'Умей ценить того кто без тебя не может'.split()

# st2 = [i for i in st]
# print(*st2,sep='\n')


print('-8-'*30)

# На вход программе подается строка текста. Напишите программу,
# использующую списочное выражение, которая выводит все цифровые символы данной строки.


# st = '12sggrth45'


# st2 = [i for i in st if i in '0123456789']
# print(''.join(st2))

print('-9-'*30)

# На вход программе подается строка текста, содержащая целые числа. 
# Напишите программу, использующую списочное выражение, которая выводит не оканчивающиеся на цифру 
# 4 квадраты четных чисел.


# st = '1 2 3 4 5 6 7 8 9'.split()

# st2 = [ int(i)** 2    for i in st if int(i) % 2 == 0  and   int(i)**2 % 10 != 4  ]

# print(*st2)
