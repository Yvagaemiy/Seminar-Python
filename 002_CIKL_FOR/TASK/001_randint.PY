

#Случайное целое число — randint(a, b) модуль random
# Возвращает случайное целое число Number, такое что a <= Number <= b;
# randint(a,b) работает только с целыми числами;
# Функция randint(a,b) принимает только два параметра, оба обязательны;
# Полученное в результате случайно число больше или равно a, а также меньше или равно b.


print('_______Случайное целое число — randint(a, b) ____________________________________________')
import random

print("Генерация случайного числа в пределах заданного промежутка")
print(random.randint(-10, 50 ))

print('________Генерация случайного целого числа — randrange()___________________________________________')
#Генерация случайного целого числа — randrange() модуль random
# Метод random.randrange() используется для генерации случайного целого числа в пределах заданного промежутка. 
# Скажем, для получения любого числа в диапазоне между 10 и 50.
# Шаг показывает разницу между каждым числом заданной последовательности.
# Шаг по умолчанию равен 1, однако его значение можно изменить.

import random
 
 
print("Генерация случайного числа в пределах заданного промежутка")
print(random.randrange(10, 50, 5))
print(random.randrange(10, 50, 5))

print('_______Выбор случайного элемента из списка choice()____________________________________________')
#Выбор случайного элемента из списка choice() модуль random
# Метод random.choice() используется для выбора случайного элемента из списка. 
# Набор может быть представлен в виде списка или python строки. 
# Метод возвращает один случайный элемент последовательности.

import random
 
 
list = [55, 66, 77, 88, 99]
print("random.choice используется для выбора случайного элемента из списка - ", random.choice(list))

print('_____Метод sample(population, k)______________________________________________')
# Метод sample(population, k) из модуля random
# Метод random.sample() используется, когда требуется выбрать несколько элементов из заданной последовательности population.

# Метод sample() возвращает список уникальных элементов,
# которые были выбраны из последовательности population.
# Итоговое количество элементов зависит от значения k;
# Значение в population может быть представлено в виде списка или любой другой последовательности.

import random
 
 
list = [2, 5, 8, 9, 12]
print ("random.sample() ", random.sample(list,3))


print('_________Случайные элементы из списка — choices()__________________________________________')
# Случайные элементы из списка — choices() модуль random
# random.choices(population, weights=None, *, cum_weights=None, k=1)
# Метод random.choices() используется, когда требуется выбрать несколько случайных элементов из заданной последовательности.
# Метод choices() был введен в версии Python 3.6. Он также позволяет повторять несколько раз один и тот же элемент.

import random
 
 
# Выборка с заменой
list = [20, 30, 40, 50 ,60, 70, 80, 90]
sampling = random.choices(list, k=5)
 
print("Выборка с методом choices ", sampling)

print('_______Генератор псевдослучайных чисел —  seed() ____________________________________________')
# Генератор псевдослучайных чисел —  seed() модуль random
# Метод seed() используется для инициализации генератора псевдослучайных чисел в Python;
# Модуль random использует значение из seed, или отправной точки как основу для генерации случайного числа.
# Если значения seed нет в наличии, тогда система будет отталкиваться от текущего времени.


import random
 
 
random.seed(6)
print("Случайное число с семенем ",random.random())
 
print("Случайное число с семенем ",random.random())


print('______ Перемешивание данных — shuffle() _____________________________________________')
# Перемешивание данных — shuffle() из модуля random
# Метод random.shuffle() используется для перемешивания данных списка или другой последовательности. 
# Метод shuffle() смешивает элементы списка на месте. Самый показательный пример использования — тасование карт.


list = [2, 5, 8, 9, 12]
 
 
random.shuffle(list)
print ("Вывод перемешанного списка ", list)

print('________ Генерации числа с плавающей запятой — uniform() ___________________________________________')
# Генерации числа с плавающей запятой — uniform() модуль random
# random.uniform() используется для генерации числа с плавающей запятой в пределах заданного промежутка
# Значение конечной точки может включаться в диапазон, но это не обязательно.
# Все зависит от округления значения числа с плавающей запятой;
# Метод может, например, сгенерировать случайно вещественное число в промежутке между 10.5 и 25.5.


import random
 
 
print("Число с плавающей точкой в пределах заданного промежутка")
print(random.uniform(10.5, 25.5))

print('_______triangular(low, high, mode) из модуля random____________________________________________')
# triangular(low, high, mode) из модуля random
# Функция random.triangular() возвращает случайное вещественное число N с плавающей запятой,
# которое соответствует условию lower <= N <= upper, а также уточняющему значению mode.
# Значение нижнего предела по умолчанию равно нулю, в верхнего — единице.
# Кроме того, пик аргумента по умолчанию установлен на середине границ,
# что обеспечивает симметричное распределение.
# Функция random.triangular() используется в генерации случайных чисел для 
# треугольного распределения с целью использования полученных значений в симуляции. 
# Это значит, что в при генерации значения применяется треугольное распределение вероятности. 


import random
 
 
print("Число с плавающей точкой через triangular")
print(random.triangular(10.5, 25.5, 5.5))

print('______Применение модуля secrets для защиты случайных данных_____________________________________________')


#Криптографическая зашита генератора случайных данных в Python

# Криптографически надежный генератор псевдослучайных чисел представляет собой генератор чисел,
# который обладает особенностями, что делают его подходящим для использования в криптографических приложениях,
# где безопасность данных имеет первостепенное значение.
# Все функции криптографически надежного генератора возвращают полученные случайным образом байты;
# Значение случайных байтов, полученных в результате использования функции, зависит от источников ОС.
# Качество генерации также зависит от случайных источников ОС.



# Для обеспечения криптографической надежности генерации случайных чисел можно использовать следующие подходы:
# Применение модуля secrets для защиты случайных данных;
# Использование из модуля os os.urandom();
# Использование класса random.SystemRandom.

import random
import secrets
 
 
number = random.SystemRandom().random()
print("Надежное число ", number)
 
print("Надежный токен байтов", secrets.token_bytes(16))

print('______getstate() и setstate() в генераторе случайных данных_____________________________________________')
# getstate() и setstate() в генераторе случайных данных Python
# Функции getstate() и setstate() модуля random позволяют зафиксировать текущее внутреннее состояние генератора.

# Используя данные функции, можно сгенерировать одинаковое количество чисел или последовательностей данных.

# Состояние генератора getstate() модуль random
# Функция getstate() возвращает определенный объект, 
# зафиксировав текущее внутреннее состояние генератора случайных данных. 
# Данное состояние передается методу setstate() для восстановления полученного состояния в качестве текущего.

# На заметку: Изменив значение текущего состояния на значение предыдущего,
# мы можем получить случайные данные вновь. Например,
# если вы хотите получить аналогичную выборку вновь, можно использовать данные функции.

# Восстанавливает внутреннее состояние генератора — setstate() модуль random
# Функция setstate() восстанавливает внутреннее состояние генератора и передает его состоянию объекта.
# Это значит, что вновь будет использован тот же параметр состояния state. 
# Объект state может быть получен при помощи вызова функции getstate().

# Зачем нужны функции getstate() и setstate() ?
# Если вы получили предыдущее состояние и восстановили его, 
# тогда вы сможете оперировать одними и теми же случайными данными раз за разом. Помните,
# что использовать другую функцию random в данном случае нельзя.
# Также нельзя изменить значения заданных параметров. 
# Сделав это, вы измените значение состояния state.

import random
 
 
number_list = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]
 
print("Первая выборка ", random.sample(number_list,k=5))
 
# хранит текущее состояние в объекте state
state = random.getstate()
 
print("Вторая выборка ", random.sample(number_list,k=5))
 
# Восстанавливает состояние state, используя setstate
random.setstate(state)
 
#Теперь будет выведен тот же список второй выборки
print("Третья выборка ", random.sample(number_list,k=5))
 
# Восстанавливает текущее состояние state
random.setstate(state)
 
# Вновь будет выведен тот же список второй выборки
print("Четвертая выборка ", random.sample(number_list,k=5))



print('_______Генерация случайных универсально уникальных ID____________________________________________')



# Генерация случайных универсально уникальных ID
# Модуль Python UUID предоставляет неизменяемые UUID объекты. 
# UUID является универсально уникальным идентификатором.

# У модуля есть функции для генерации всех версий UUID.
# Используя функцию uuid.uuid4(), можно получить случайно сгенерированное уникальное ID длиной в 128 битов,
# которое к тому же является криптографически надежным.

# Полученные уникальные ID используются для идентификации документов,
# пользователей, ресурсов и любой другой информации на компьютерных системах.


import uuid
 
 
# получить уникальный UUID
safeId = uuid.uuid4()
print("безопасный уникальный id ", safeId)

print('_____Генерация случайного n-мерного массива целых чисел______________________________________________')
# Генерация случайного n-мерного массива целых чисел
# Для генерации случайного n-мерного массива
# целых чисел используется numpy.random.random_integers():


import numpy
 
 
random_integer_array = numpy.random.random_integers(1, 10, 5)
print("1-мерный массив случайных целых чисел \n", random_integer_array,"\n")
 
random_integer_array = numpy.random.random_integers(1, 10, size=(3, 2))
print("2-мерный массив случайных целых чисел \n", random_integer_array)

print('_____Выбор случайного элемента из массива чисел или последовательности_________________________________')
# Выбор случайного элемента из массива чисел или последовательности
# Использование numpy.random.choice() для генерации случайной выборки;
# Использование данного метода для получения одного или
# нескольких случайных чисел из n-мерного массива с заменой или без нее.

import numpy
 
 
array =[10, 20, 30, 40, 50, 20, 40] 
single_random_choice = numpy.random.choice(array, size=1) 
print("один случайный выбор из массива 1-D", single_random_choice) 
 
multiple_random_choice = numpy.random.choice(array, size=3, replace=False) 
print("несколько случайных выборов из массива 1-D без замены", multiple_random_choice) 
 
multiple_random_choice = numpy.random.choice(array, size=3, replace=True) 
print("несколько случайных выборов из массива 1-D с заменой", multiple_random_choice)


print('____Игра в кости с использованием модуля random в Python_______________________________________________')
# Игра в кости с использованием модуля random в Python
# Далее представлен код простой игры в кости, которая поможет понять принцип работы функций модуля random.
# В игре два участника и два кубика.

# Участники по очереди бросают кубики, предварительно встряхнув их;
# Алгоритм высчитывает сумму значений кубиков каждого участника и 
# добавляет полученный результат на доску с результатами;
# Участник, у которого в результате большее количество очков, выигрывает.


import random
 
 
PlayerOne = "Анна"
PlayerTwo = "Алекс"
 
AnnaScore = 0
AlexScore = 0
 
# У каждого кубика шесть возможных значений
diceOne = [1, 2, 3, 4, 5, 6]
diceTwo = [1, 2, 3, 4, 5, 6]
 
def playDiceGame():
    """Оба участника, Анна и Алекс, бросают кубик, используя метод shuffle"""
 
    for i in range(5):
        #оба кубика встряхиваются 5 раз
        random.shuffle(diceOne)
        random.shuffle(diceTwo)
    firstNumber = random.choice(diceOne) # использование метода choice для выбора случайного значения
    SecondNumber = random.choice(diceTwo)
    return firstNumber + SecondNumber
 
print("Игра в кости использует модуль random\n")
 
#Давайте сыграем в кости три раза
for i in range(3):
    # определим, кто будет бросать кости первым
    AlexTossNumber = random.randint(1, 100) # генерация случайного числа от 1 до 100, включая 100
    AnnaTossNumber = random.randrange(1, 101, 1) # генерация случайного числа от 1 до 100, не включая 101
 
    if( AlexTossNumber > AnnaTossNumber):
        print("Алекс выиграл жеребьевку.")
        AlexScore = playDiceGame()
        AnnaScore = playDiceGame()
    else:
        print("Анна выиграла жеребьевку.")
        AnnaScore = playDiceGame()
        AlexScore = playDiceGame()
 
    if(AlexScore > AnnaScore):
        print ("Алекс выиграл игру в кости. Финальный счет Алекса:", AlexScore, "Финальный счет Анны:", AnnaScore, "\n")
    else:
        print("Анна выиграла игру в кости. Финальный счет Анны:", AnnaScore, "Финальный счет Алекса:", AlexScore, "\n")
        
print('_______ Numpy.random — Генератор псевдослучайных чисел____________________________________________')
# Numpy.random — Генератор псевдослучайных чисел
# PRNG является англоязычным акронимом, который расшифровывается как
# «pseudorandom number generator» — генератор псевдослучайных чисел. Известно, 
# что в Python модуль random можно использовать для генерации случайных скалярных числовых значений и данных.

# Для генерации массива случайных чисел необходимо использовать numpy.random();
# В модуле numpy есть пакет numpy.random, который содержит обширный набор функций 
# для генерации случайных n-мерных массивов для различных распределений.
# Рассмотрим несколько примеров использования numpy.random в Python.

# Генерация случайного n-мерного массива вещественных чисел
# Использование numpy.random.rand() для генерации n-мерного массива случайных вещественных чисел в пределах [0.0, 1.0)
# Использование numpy.random.uniform() для генерации n-мерного массива случайных вещественных чисел в пределах [low, high) 
 
        
import numpy
 
 
random_float_array = numpy.random.rand(2, 2)
print("2 X 2 массив случайных вещественных чисел в [0.0, 1.0] \n", random_float_array,"\n")
 
random_float_array = numpy.random.uniform(25.5, 99.5, size=(3, 2))
print("3 X 2 массив случайных вещественных чисел в [25.5, 99.5] \n", random_float_array,"\n")



